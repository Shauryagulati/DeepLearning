{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DL_Worksheet9/10",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "_6ee71ZPk00a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6d09cfa-0728-416c-e375-6c2b7f1f4e27"
      },
      "source": [
        "#Mounting Google Drive to Read Data\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n0xY2kBJmznZ"
      },
      "source": [
        "#Importing all the Might Required Libraries\n",
        "import pandas as pd\n",
        "import re\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing import sequence\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-sEMWwQDm474"
      },
      "source": [
        "#Reading Data Files\n",
        "df_real = pd.read_csv('/content/gdrive/My Drive/True.csv')\n",
        "df_fake = pd.read_csv('/content/gdrive/My Drive/Fake.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7OjKHOgsoNwh"
      },
      "source": [
        "#Providing Label to the Data\n",
        "df_fake['fake'] = 1\n",
        "df_real['fake'] = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y60RnlNPoUly"
      },
      "source": [
        "#Combining both the Real and Fake Data\n",
        "combined = pd.concat([df_fake, df_real])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZxzcGyPgu1yj"
      },
      "source": [
        "#Train/Test Data in Features and labels\n",
        "features = combined['text']\n",
        "labels = combined['fake']\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, labels, random_state = 50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mJrJDI7eoYzc"
      },
      "source": [
        "#Tokenizing the Text and Adding Padding\n",
        "max_words = 2000\n",
        "max_len = 400\n",
        "\n",
        "token = Tokenizer(num_words=max_words, lower=True, split=' ')\n",
        "token.fit_on_texts(X_train.values)\n",
        "sequences = token.texts_to_sequences(X_train.values)\n",
        "train_sequences_padded = pad_sequences(sequences, maxlen=max_len)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "07-9_mNnoi4n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10a4caed-8c7d-473e-fce0-1396d686d288"
      },
      "source": [
        "#RNN Model\n",
        "embed_dim = 50\n",
        "lstm_out = 64\n",
        "batch_size = 32\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Embedding(max_words, embed_dim, input_length = max_len))\n",
        "model.add(LSTM(lstm_out))\n",
        "model.add(Dense(256))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(1, name='out_layer'))\n",
        "model.add(Activation('sigmoid'))\n",
        "model.compile(loss = 'binary_crossentropy', optimizer='adam',metrics = ['accuracy'])\n",
        "print(model.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 400, 50)           100000    \n",
            "_________________________________________________________________\n",
            "lstm (LSTM)                  (None, 64)                29440     \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 256)               16640     \n",
            "_________________________________________________________________\n",
            "activation (Activation)      (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "out_layer (Dense)            (None, 1)                 257       \n",
            "_________________________________________________________________\n",
            "activation_1 (Activation)    (None, 1)                 0         \n",
            "=================================================================\n",
            "Total params: 146,337\n",
            "Trainable params: 146,337\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p3-CxKGD4qKa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d561d3b2-09ba-4d02-9ba1-a1425e4119ac"
      },
      "source": [
        "history = model.fit(train_sequences_padded, y_train, batch_size=batch_size, epochs = 5, validation_split=0.2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "842/842 [==============================] - 16s 19ms/step - loss: 0.0398 - accuracy: 0.9898 - val_loss: 0.0483 - val_accuracy: 0.9853\n",
            "Epoch 2/5\n",
            "842/842 [==============================] - 15s 18ms/step - loss: 0.0914 - accuracy: 0.9671 - val_loss: 0.0690 - val_accuracy: 0.9767\n",
            "Epoch 3/5\n",
            "842/842 [==============================] - 15s 18ms/step - loss: 0.0641 - accuracy: 0.9791 - val_loss: 0.0348 - val_accuracy: 0.9902\n",
            "Epoch 4/5\n",
            "842/842 [==============================] - 15s 18ms/step - loss: 0.0282 - accuracy: 0.9918 - val_loss: 0.0284 - val_accuracy: 0.9927\n",
            "Epoch 5/5\n",
            "842/842 [==============================] - 15s 18ms/step - loss: 0.0173 - accuracy: 0.9953 - val_loss: 0.0269 - val_accuracy: 0.9936\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BIdMTgDNudov"
      },
      "source": [
        "#Comparing to the Test Values\n",
        "test_sequences = token.texts_to_sequences(X_test)\n",
        "test_sequences_padded = pad_sequences(test_sequences, maxlen = max_len)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Jt2P3Gn471j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56ff8973-56f9-4dcc-ae0e-169e64c3dc97"
      },
      "source": [
        "#Evaluating the Model\n",
        "model.evaluate(test_sequences_padded, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "351/351 [==============================] - 3s 8ms/step - loss: 0.0261 - accuracy: 0.9937\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.026134787127375603, 0.9936748147010803]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ICbdI_bvDnue"
      },
      "source": [
        "news_dict = history.history"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SjPv19K1s7vK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "outputId": "f7cbbbad-9f14-4f2c-f564-68b154a9b104"
      },
      "source": [
        "#Plotting Graph Between Epochs and Accuracy% for Model Accuracy\n",
        "plt.plot(news_dict['accuracy'])\n",
        "plt.plot(news_dict['val_accuracy'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.legend(['Training', 'Validation'])\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epochs')\n",
        "plt.xticks([0,1,2,3,4])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([<matplotlib.axis.XTick at 0x7f3df95920d0>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df9592410>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df9592290>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df95d2dd0>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df95d20d0>],\n",
              " <a list of 5 Text major ticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_RH-avkav-9T",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "outputId": "3b0225ae-49a1-4ca1-b0e9-b0d91bf1ae8e"
      },
      "source": [
        "#Plotting Graph between Epochs and Loss% for Model Loss\n",
        "plt.plot(news_dict['loss'])\n",
        "plt.plot(news_dict['val_loss'])\n",
        "plt.title('Model Loss')\n",
        "plt.legend(['Training', 'Validation'])\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.xticks([0,1,2,3,4])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([<matplotlib.axis.XTick at 0x7f3df9584790>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df9584210>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df95d9f10>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df97b9410>,\n",
              "  <matplotlib.axis.XTick at 0x7f3df97b9910>],\n",
              " <a list of 5 Text major ticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Ca0tgl4GUmW"
      },
      "source": [
        "Accuracy -> 0.9937"
      ]
    }
  ]
}